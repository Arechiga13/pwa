{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/post/post.component.css","webpack:///./src/app/post/post.component.html","webpack:///./src/app/post/post.component.ts","webpack:///./src/app/pwa.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<h1>My Post</h1> \\n<button *ngIf=\\\"Pwa.promptEvent\\\" (click)=\\\"installPwa()\\\">Install</button>\\n<!-- <button (click)=\\\"installPwa()\\\">Install</button> -->\\n<app-post *ngFor=\\\"let post of posts\\\" [content]=\\\"post.body\\\" [title]=\\\"post.title\\\"></app-post>\"","import { Component, OnInit, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Post } from './post.model';\nimport { PwaService } from './pwa.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent implements OnInit {\n  posts: Post[] = [];\n\n  constructor(private http: HttpClient, public Pwa: PwaService) {}\n  // constructor(private http: HttpClient) {}\n\n  ngOnInit() {\n    this.http\n      .get<Post[]>('https://jsonplaceholder.typicode.com/posts')\n      .subscribe(fetchedPosts => (this.posts = fetchedPosts));\n  }\n\n  installPwa(): void {\n    console.log(\"Here\")\n    console.log(this.Pwa.promptEvent)\n    this.Pwa.promptEvent.prompt();\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { PostComponent } from './post/post.component';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { PwaService } from './pwa.service';\n\n@NgModule({\n  declarations: [AppComponent, PostComponent],\n  imports: [BrowserModule, HttpClientModule, ServiceWorkerModule.register('/ngsw-worker.js', { enabled: environment.production })],\n  providers: [PwaService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","module.exports = \"article {\\n  padding: 1rem;\\n  margin: 1rem auto;\\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);\\n  font-family: 'Oswald', sans-serif;\\n  width: 30rem;\\n  max-width: 80%;\\n}\\n\\nh1 {\\n  font-family: inherit;\\n  font-weight: bold;\\n}\\n\"","module.exports = \"<article>\\n  <h1>{{ title }}</h1>\\n  <p>{{ content }}</p>\\n</article>\\n\"","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-post',\n  templateUrl: './post.component.html',\n  styleUrls: ['./post.component.css']\n})\nexport class PostComponent {\n  @Input() title: string;\n  @Input() content: string;\n}\n","import { Injectable } from '@angular/core';\nimport { SwUpdate } from '@angular/service-worker';\n\n// @Injectable({\n//     providedIn: \"root\"\n// })\n@Injectable()\nexport class PwaService {\n    promptEvent;\n    constructor() {\n        // alert(\"Here\");\n        window.addEventListener('beforeinstallprompt', event => {\n            console.log(this.promptEvent);\n            alert(\"Here2\");\n            this.promptEvent = event;\n            console.log(this.promptEvent);\n        });\n        window.addEventListener('appinstalled', (event) => {\n            console.log('installed');\n           });\n    }\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n// platformBrowserDynamic().bootstrapModule(AppModule).then(() => {\n//   if ('serviceWorker' in navigator && environment.production) {\n//     navigator.serviceWorker.register('/ngsw-worker.js');\n//   }\n// }).catch(err => console.log(err));\n"],"sourceRoot":""}